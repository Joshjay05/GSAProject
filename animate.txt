




CSS Animations
CSS animations allow you to create dynamic transitions and animations without using JavaScript. They consist of two components: keyframes that define the stages of animation and animation properties that configure how those keyframes are applied.


Animation Properties
These properties control how the animation behaves:

animation-name: Specifies the name of the @keyframes rule
animation-duration: How long the animation takes to complete one cycle
animation-timing-function: How the animation progresses through keyframes (ease, linear, etc.)
animation-delay: Time before the animation starts
animation-iteration-count: How many times the animation should run
animation-direction: Whether the animation should alternate direction or reset
animation-fill-mode: What styles apply before/after the animation
animation-play-state: Whether the animation is running or paused
animation: Shorthand for all properties above

CSS Transitions
Transitions are simpler animations that occur when an element changes from one state to another. They're perfect for hover effects and UI interactions.

.animation-box {
    width: 50px;
    height: 50px;
    background-color: #9b59b6;
}

#box1 {
    animation: pulse 2s ease infinite;
}

#box2 {
    animation: shake 0.5s ease-in-out infinite;
}

#box3 {
    animation: flip 3s linear infinite;
}

#box4 {
    animation: bounce 1s ease infinite;
}

@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.2); }
    100% { transform: scale(1); }
}

@keyframes shake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-10px); }
    75% { transform: translateX(10px); }
}

@keyframes flip {
    0% { transform: perspective(400px) rotateY(0); }
    100% { transform: perspective(400px) rotateY(360deg); }
}

@keyframes bounce {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-20px); }
}









CSS Transitions
Transitions are simpler animations that occur when an element changes from one state to another. They're perfect for hover effects and UI interactions.



.transition-box {
    width: 80px;
    height: 80px;
    background-color: #2ecc71;
    transition-property: all;
    transition-duration: 0.5s;
}

#transition-box1:hover {
    transform: scale(1.2);
}

#transition-box2:hover {
    border-radius: 50%;
    background-color: #e74c3c;
}

#transition-box3:hover {
    transform: rotate(45deg);
    background-color: #f39c12;
}
Transition properties include:

transition-property: Which CSS properties to animate
transition-duration: How long the transition takes
transition-timing-function: The speed curve of the transition
transition-delay: When the transition starts
transition: Shorthand for all properties above

 transition: property duration timing-function delay;
 transform: transform-function(value);


| Function         | Description                            | Example                      |
| ---------------- | -------------------------------------- | ---------------------------- |
| `translateX(n)`  | Moves right/left along X-axis          | `translateX(100px)`          |
| `translateY(n)`  | Moves up/down along Y-axis             | `translateY(-50px)`          |
| `translate(n,n)` | Moves in both directions               | `translate(50px, 100px)`     |
| `rotate(deg)`    | Rotates element                        | `rotate(45deg)`              |
| `scale(n)`       | Scales the size                        | `scale(1.5)` (150% size)     |
| `scaleX(n)`      | Scales width only                      | `scaleX(2)`                  |
| `scaleY(n)`      | Scales height only                     | `scaleY(0.5)`                |
| `skewX(deg)`     | Tilts element horizontally             | `skewX(30deg)`               |
| `skewY(deg)`     | Tilts element vertically               | `skewY(30deg)`               |
| `matrix(...)`    | Combine multiple transforms (advanced) | `matrix(1, 0, 0, 1, 30, 20)` |








.mosaic-grid {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-auto-rows: 100px;
  gap: 10px;
}

.mosaic-item {
  background: #ffe066;
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  border-radius: 8px;
}

/* Mosaic Variants */
.mosaic-item.tall {
  grid-row: span 2;
  background-color: #f67280;
}

.mosaic-item.wide {
  grid-column: span 2;
  background-color: #6c5ce7;
}

<h3>Mosaic Layout (Grid)</h3>
<div class="mosaic-grid">
  <div class="mosaic-item tall">1</div>
  <div class="mosaic-item">2</div>
  <div class="mosaic-item wide">3</div>
  <div class="mosaic-item">4</div>
  <div class="mosaic-item">5</div>
</div>


 Flex: flex: 1 1 150px
Shorthand for:

css
Copy
Edit
flex-grow: 1;   /* can grow */
flex-shrink: 1; /* can shrink */
flex-basis: 150px; /* starts at 150px */
This means:

Item starts at 150px.

It grows and shrinks to fit space dynamically with siblings in the flex container.

